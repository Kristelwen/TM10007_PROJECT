{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "brat_assignment.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "ySDv5ko54ViJ",
        "gY9t_GtJ1KrG",
        "tzrJpQt-PM9u",
        "wO_MGCSW8d0l",
        "FqLl7RNggs9n",
        "gL04AA6EH9_7",
        "fuluNEEqjEoY"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kristelwen/TM10007_PROJECT/blob/master/Made%20code%20more%20neat\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "7SXpaKwwGe5x"
      },
      "source": [
        "# TM10007 Assignment, data set 1\n",
        "Kristel Wenink (4450396), Lalot Gunneman (4532155), Marijn van der Graaf (4468708), Tahisa Robles (4531434)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "CiDn2Sk-VWqE",
        "outputId": "826f3918-77d4-471b-ead5-bfe13de918c2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Run this to use from colab environment\n",
        "!pip install -q --upgrade git+https://github.com/Kristelwen/TM10007_PROJECT"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  Building wheel for brats (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ySDv5ko54ViJ",
        "colab_type": "text"
      },
      "source": [
        "# Data loading and importing modules"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B_Lae4Zh5V3B",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Importing modules\n",
        "# General packages\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "from time import time\n",
        "from scipy.stats import randint\n",
        "\n",
        "# Preprocessing packages\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Feature selection\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.feature_selection import RFECV\n",
        "\n",
        "# Classifiers\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "\n",
        "# SVM Kernels\n",
        "from sklearn.kernel_approximation import RBFSampler\n",
        "from sklearn.metrics.pairwise import rbf_kernel, sigmoid_kernel\n",
        "from sklearn.decomposition import KernelPCA\n",
        "\n",
        "# Model selection\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import learning_curve\n",
        "from sklearn.model_selection import StratifiedShuffleSplit\n",
        "\n",
        "# Performance metrics\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "from sklearn.model_selection import cross_val_score"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "-NE_fTbKGe5z",
        "outputId": "8e7c70aa-3dc3-416b-d8ff-8692d7edc6fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        }
      },
      "source": [
        "# Loading the data\n",
        "from brats.load_data import load_data\n",
        "\n",
        "data = load_data()\n",
        "print(f'The number of samples: {len(data.index)}')\n",
        "print(f'The number of columns: {len(data.columns)}\\n')\n",
        "data.groupby('label').size()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The number of samples: 167\n",
            "The number of columns: 725\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "label\n",
              "GBM    102\n",
              "LGG     65\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "50S8Z8Y968kr",
        "colab_type": "code",
        "outputId": "ace2c504-d18f-4853-df9d-5dff2b07d7e9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        }
      },
      "source": [
        "# Display data for analysis\n",
        "data_top = data.head()\n",
        "data_top "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>VOLUME_ET</th>\n",
              "      <th>VOLUME_NET</th>\n",
              "      <th>VOLUME_ED</th>\n",
              "      <th>VOLUME_TC</th>\n",
              "      <th>VOLUME_WT</th>\n",
              "      <th>VOLUME_BRAIN</th>\n",
              "      <th>VOLUME_ET_OVER_NET</th>\n",
              "      <th>VOLUME_ET_OVER_ED</th>\n",
              "      <th>VOLUME_NET_OVER_ED</th>\n",
              "      <th>VOLUME_ET_over_TC</th>\n",
              "      <th>VOLUME_NET_over_TC</th>\n",
              "      <th>VOLUME_ED_over_TC</th>\n",
              "      <th>VOLUME_ET_OVER_WT</th>\n",
              "      <th>VOLUME_NET_OVER_WT</th>\n",
              "      <th>VOLUME_ED_OVER_WT</th>\n",
              "      <th>VOLUME_TC_OVER_WT</th>\n",
              "      <th>VOLUME_ET_OVER_BRAIN</th>\n",
              "      <th>VOLUME_NET_OVER_BRAIN</th>\n",
              "      <th>VOLUME_ED_over_BRAIN</th>\n",
              "      <th>VOLUME_TC_over_BRAIN</th>\n",
              "      <th>VOLUME_WT_OVER_BRAIN</th>\n",
              "      <th>DIST_Vent_TC</th>\n",
              "      <th>DIST_Vent_ED</th>\n",
              "      <th>INTENSITY_Mean_ET_T1Gd</th>\n",
              "      <th>INTENSITY_STD_ET_T1Gd</th>\n",
              "      <th>INTENSITY_Mean_ET_T1</th>\n",
              "      <th>INTENSITY_STD_ET_T1</th>\n",
              "      <th>INTENSITY_Mean_ET_T2</th>\n",
              "      <th>INTENSITY_STD_ET_T2</th>\n",
              "      <th>INTENSITY_Mean_ET_FLAIR</th>\n",
              "      <th>INTENSITY_STD_ET_FLAIR</th>\n",
              "      <th>INTENSITY_Mean_NET_T1Gd</th>\n",
              "      <th>INTENSITY_STD_NET_T1Gd</th>\n",
              "      <th>INTENSITY_Mean_NET_T1</th>\n",
              "      <th>INTENSITY_STD_NET_T1</th>\n",
              "      <th>INTENSITY_Mean_NET_T2</th>\n",
              "      <th>INTENSITY_STD_NET_T2</th>\n",
              "      <th>INTENSITY_Mean_NET_FLAIR</th>\n",
              "      <th>INTENSITY_STD_NET_FLAIR</th>\n",
              "      <th>INTENSITY_Mean_ED_T1Gd</th>\n",
              "      <th>...</th>\n",
              "      <th>TEXTURE_NGTDM_NET_T1_Busyness</th>\n",
              "      <th>TEXTURE_NGTDM_NET_T1_Complexity</th>\n",
              "      <th>TEXTURE_NGTDM_NET_T1_Strength</th>\n",
              "      <th>TEXTURE_NGTDM_NET_T2_Coarseness</th>\n",
              "      <th>TEXTURE_NGTDM_NET_T2_Contrast</th>\n",
              "      <th>TEXTURE_NGTDM_NET_T2_Busyness</th>\n",
              "      <th>TEXTURE_NGTDM_NET_T2_Complexity</th>\n",
              "      <th>TEXTURE_NGTDM_NET_T2_Strength</th>\n",
              "      <th>TEXTURE_NGTDM_NET_FLAIR_Coarseness</th>\n",
              "      <th>TEXTURE_NGTDM_NET_FLAIR_Contrast</th>\n",
              "      <th>TEXTURE_NGTDM_NET_FLAIR_Busyness</th>\n",
              "      <th>TEXTURE_NGTDM_NET_FLAIR_Complexity</th>\n",
              "      <th>TEXTURE_NGTDM_NET_FLAIR_Strength</th>\n",
              "      <th>TGM_p1</th>\n",
              "      <th>TGM_dw</th>\n",
              "      <th>TGM_Cog_X_1</th>\n",
              "      <th>TGM_Cog_Y_1</th>\n",
              "      <th>TGM_Cog_Z_1</th>\n",
              "      <th>TGM_T_1</th>\n",
              "      <th>TGM_Cog_X_2</th>\n",
              "      <th>TGM_Cog_Y_2</th>\n",
              "      <th>TGM_Cog_Z_2</th>\n",
              "      <th>TGM_T_2</th>\n",
              "      <th>TGM_Cog_X_3</th>\n",
              "      <th>TGM_Cog_Y_3</th>\n",
              "      <th>TGM_Cog_Z_3</th>\n",
              "      <th>TGM_T_3</th>\n",
              "      <th>TGM_Cog_X_4</th>\n",
              "      <th>TGM_Cog_Y_4</th>\n",
              "      <th>TGM_Cog_Z_4</th>\n",
              "      <th>TGM_T_4</th>\n",
              "      <th>TGM_Cog_X_5</th>\n",
              "      <th>TGM_Cog_Y_5</th>\n",
              "      <th>TGM_Cog_Z_5</th>\n",
              "      <th>TGM_T_5</th>\n",
              "      <th>TGM_Cog_X_6</th>\n",
              "      <th>TGM_Cog_Y_6</th>\n",
              "      <th>TGM_Cog_Z_6</th>\n",
              "      <th>TGM_T_6</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>TCGA-02-0006</th>\n",
              "      <td>1662</td>\n",
              "      <td>384</td>\n",
              "      <td>36268</td>\n",
              "      <td>2046</td>\n",
              "      <td>38314</td>\n",
              "      <td>1469432</td>\n",
              "      <td>4.328125</td>\n",
              "      <td>0.0458255</td>\n",
              "      <td>0.0105878</td>\n",
              "      <td>0.81232</td>\n",
              "      <td>0.18768</td>\n",
              "      <td>17.7263</td>\n",
              "      <td>0.043378</td>\n",
              "      <td>0.010022</td>\n",
              "      <td>0.946599</td>\n",
              "      <td>0.053401</td>\n",
              "      <td>0.001131</td>\n",
              "      <td>0.000261</td>\n",
              "      <td>0.024682</td>\n",
              "      <td>0.001392</td>\n",
              "      <td>0.026074</td>\n",
              "      <td>31.5903</td>\n",
              "      <td>2.7735</td>\n",
              "      <td>149.7977</td>\n",
              "      <td>10.4671</td>\n",
              "      <td>194.1422</td>\n",
              "      <td>15.1037</td>\n",
              "      <td>154.9225</td>\n",
              "      <td>43.4709</td>\n",
              "      <td>220.5894</td>\n",
              "      <td>30.2917</td>\n",
              "      <td>137.8881</td>\n",
              "      <td>6.3820</td>\n",
              "      <td>183.6933</td>\n",
              "      <td>14.8846</td>\n",
              "      <td>161.1005</td>\n",
              "      <td>35.8591</td>\n",
              "      <td>227.7510</td>\n",
              "      <td>23.9509</td>\n",
              "      <td>131.8402</td>\n",
              "      <td>...</td>\n",
              "      <td>0.02674</td>\n",
              "      <td>2536.7559</td>\n",
              "      <td>43.3129</td>\n",
              "      <td>0.036634</td>\n",
              "      <td>0.50304</td>\n",
              "      <td>0.024264</td>\n",
              "      <td>3593.3279</td>\n",
              "      <td>43.67590</td>\n",
              "      <td>0.057204</td>\n",
              "      <td>0.33980</td>\n",
              "      <td>0.021897</td>\n",
              "      <td>2203.2034</td>\n",
              "      <td>61.3293</td>\n",
              "      <td>8.00000</td>\n",
              "      <td>7.500000e-07</td>\n",
              "      <td>0.178609</td>\n",
              "      <td>0.096256</td>\n",
              "      <td>0.052741</td>\n",
              "      <td>2.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GBM</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TCGA-02-0009</th>\n",
              "      <td>4362</td>\n",
              "      <td>4349</td>\n",
              "      <td>15723</td>\n",
              "      <td>8711</td>\n",
              "      <td>24434</td>\n",
              "      <td>1295721</td>\n",
              "      <td>1.002989</td>\n",
              "      <td>0.277428</td>\n",
              "      <td>0.276601</td>\n",
              "      <td>0.50075</td>\n",
              "      <td>0.49925</td>\n",
              "      <td>1.8050</td>\n",
              "      <td>0.178522</td>\n",
              "      <td>0.177990</td>\n",
              "      <td>0.643489</td>\n",
              "      <td>0.356511</td>\n",
              "      <td>0.003366</td>\n",
              "      <td>0.003356</td>\n",
              "      <td>0.012135</td>\n",
              "      <td>0.006723</td>\n",
              "      <td>0.018857</td>\n",
              "      <td>9.2443</td>\n",
              "      <td>3.0207</td>\n",
              "      <td>165.4345</td>\n",
              "      <td>6.4047</td>\n",
              "      <td>201.2400</td>\n",
              "      <td>13.4733</td>\n",
              "      <td>113.1601</td>\n",
              "      <td>10.1373</td>\n",
              "      <td>210.1810</td>\n",
              "      <td>15.9543</td>\n",
              "      <td>152.6013</td>\n",
              "      <td>4.2360</td>\n",
              "      <td>188.0607</td>\n",
              "      <td>11.1316</td>\n",
              "      <td>116.8538</td>\n",
              "      <td>10.0992</td>\n",
              "      <td>209.7901</td>\n",
              "      <td>16.7943</td>\n",
              "      <td>139.2815</td>\n",
              "      <td>...</td>\n",
              "      <td>0.31558</td>\n",
              "      <td>967.7845</td>\n",
              "      <td>3.7444</td>\n",
              "      <td>0.003790</td>\n",
              "      <td>0.36163</td>\n",
              "      <td>0.271420</td>\n",
              "      <td>1996.1440</td>\n",
              "      <td>2.77050</td>\n",
              "      <td>0.004966</td>\n",
              "      <td>0.28715</td>\n",
              "      <td>0.189980</td>\n",
              "      <td>1440.4285</td>\n",
              "      <td>3.5999</td>\n",
              "      <td>3.31250</td>\n",
              "      <td>1.000000e-09</td>\n",
              "      <td>0.077618</td>\n",
              "      <td>0.122900</td>\n",
              "      <td>0.094336</td>\n",
              "      <td>91.4736</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GBM</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TCGA-02-0011</th>\n",
              "      <td>33404</td>\n",
              "      <td>48612</td>\n",
              "      <td>45798</td>\n",
              "      <td>82016</td>\n",
              "      <td>127814</td>\n",
              "      <td>1425843</td>\n",
              "      <td>0.687155</td>\n",
              "      <td>0.729377</td>\n",
              "      <td>1.06144</td>\n",
              "      <td>0.40729</td>\n",
              "      <td>0.59271</td>\n",
              "      <td>0.5584</td>\n",
              "      <td>0.261349</td>\n",
              "      <td>0.380334</td>\n",
              "      <td>0.358318</td>\n",
              "      <td>0.641682</td>\n",
              "      <td>0.023428</td>\n",
              "      <td>0.034094</td>\n",
              "      <td>0.032120</td>\n",
              "      <td>0.057521</td>\n",
              "      <td>0.089641</td>\n",
              "      <td>1.0000</td>\n",
              "      <td>1.0000</td>\n",
              "      <td>186.3385</td>\n",
              "      <td>17.6126</td>\n",
              "      <td>188.2019</td>\n",
              "      <td>23.5195</td>\n",
              "      <td>172.8969</td>\n",
              "      <td>32.7401</td>\n",
              "      <td>167.1395</td>\n",
              "      <td>34.1684</td>\n",
              "      <td>149.0643</td>\n",
              "      <td>12.9090</td>\n",
              "      <td>158.4197</td>\n",
              "      <td>15.2632</td>\n",
              "      <td>197.4966</td>\n",
              "      <td>27.1781</td>\n",
              "      <td>165.1014</td>\n",
              "      <td>25.2120</td>\n",
              "      <td>161.5790</td>\n",
              "      <td>...</td>\n",
              "      <td>1.39580</td>\n",
              "      <td>1322.6082</td>\n",
              "      <td>0.7473</td>\n",
              "      <td>0.000634</td>\n",
              "      <td>0.31856</td>\n",
              "      <td>1.144300</td>\n",
              "      <td>2517.8629</td>\n",
              "      <td>0.84294</td>\n",
              "      <td>0.000794</td>\n",
              "      <td>0.17961</td>\n",
              "      <td>1.068800</td>\n",
              "      <td>1147.5177</td>\n",
              "      <td>0.8048</td>\n",
              "      <td>5.78125</td>\n",
              "      <td>1.000000e-09</td>\n",
              "      <td>0.132283</td>\n",
              "      <td>0.116006</td>\n",
              "      <td>0.096035</td>\n",
              "      <td>272.4290</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GBM</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TCGA-02-0027</th>\n",
              "      <td>12114</td>\n",
              "      <td>7587</td>\n",
              "      <td>34086</td>\n",
              "      <td>19701</td>\n",
              "      <td>53787</td>\n",
              "      <td>1403429</td>\n",
              "      <td>1.596679</td>\n",
              "      <td>0.355395</td>\n",
              "      <td>0.222584</td>\n",
              "      <td>0.61489</td>\n",
              "      <td>0.38511</td>\n",
              "      <td>1.7302</td>\n",
              "      <td>0.225222</td>\n",
              "      <td>0.141056</td>\n",
              "      <td>0.633722</td>\n",
              "      <td>0.366278</td>\n",
              "      <td>0.008632</td>\n",
              "      <td>0.005406</td>\n",
              "      <td>0.024288</td>\n",
              "      <td>0.014038</td>\n",
              "      <td>0.038325</td>\n",
              "      <td>1.0331</td>\n",
              "      <td>1.0000</td>\n",
              "      <td>178.6925</td>\n",
              "      <td>23.1751</td>\n",
              "      <td>199.7626</td>\n",
              "      <td>27.0047</td>\n",
              "      <td>157.0192</td>\n",
              "      <td>25.6793</td>\n",
              "      <td>173.6525</td>\n",
              "      <td>26.3596</td>\n",
              "      <td>120.3726</td>\n",
              "      <td>17.5926</td>\n",
              "      <td>199.5765</td>\n",
              "      <td>25.3652</td>\n",
              "      <td>194.2708</td>\n",
              "      <td>24.5411</td>\n",
              "      <td>207.5531</td>\n",
              "      <td>32.7868</td>\n",
              "      <td>129.2927</td>\n",
              "      <td>...</td>\n",
              "      <td>0.14356</td>\n",
              "      <td>1722.6804</td>\n",
              "      <td>6.9449</td>\n",
              "      <td>0.002126</td>\n",
              "      <td>0.54383</td>\n",
              "      <td>0.379490</td>\n",
              "      <td>3698.6228</td>\n",
              "      <td>2.31820</td>\n",
              "      <td>0.003284</td>\n",
              "      <td>0.41179</td>\n",
              "      <td>0.206600</td>\n",
              "      <td>3320.1690</td>\n",
              "      <td>4.7336</td>\n",
              "      <td>3.87500</td>\n",
              "      <td>1.000000e-09</td>\n",
              "      <td>0.100415</td>\n",
              "      <td>0.088249</td>\n",
              "      <td>0.096470</td>\n",
              "      <td>128.4680</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GBM</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TCGA-02-0033</th>\n",
              "      <td>34538</td>\n",
              "      <td>7137</td>\n",
              "      <td>65653</td>\n",
              "      <td>41675</td>\n",
              "      <td>107328</td>\n",
              "      <td>1365237</td>\n",
              "      <td>4.839288</td>\n",
              "      <td>0.526069</td>\n",
              "      <td>0.108708</td>\n",
              "      <td>0.82875</td>\n",
              "      <td>0.17125</td>\n",
              "      <td>1.5754</td>\n",
              "      <td>0.321799</td>\n",
              "      <td>0.066497</td>\n",
              "      <td>0.611704</td>\n",
              "      <td>0.388296</td>\n",
              "      <td>0.025298</td>\n",
              "      <td>0.005228</td>\n",
              "      <td>0.048089</td>\n",
              "      <td>0.030526</td>\n",
              "      <td>0.078615</td>\n",
              "      <td>1.0000</td>\n",
              "      <td>1.0000</td>\n",
              "      <td>172.4109</td>\n",
              "      <td>27.5731</td>\n",
              "      <td>121.4969</td>\n",
              "      <td>10.3061</td>\n",
              "      <td>148.9331</td>\n",
              "      <td>27.8493</td>\n",
              "      <td>159.0135</td>\n",
              "      <td>23.9666</td>\n",
              "      <td>116.9944</td>\n",
              "      <td>8.2358</td>\n",
              "      <td>117.7009</td>\n",
              "      <td>9.9957</td>\n",
              "      <td>139.4320</td>\n",
              "      <td>34.3293</td>\n",
              "      <td>139.3234</td>\n",
              "      <td>12.9900</td>\n",
              "      <td>120.7850</td>\n",
              "      <td>...</td>\n",
              "      <td>0.71382</td>\n",
              "      <td>538.8446</td>\n",
              "      <td>1.1436</td>\n",
              "      <td>0.002162</td>\n",
              "      <td>0.47817</td>\n",
              "      <td>0.555670</td>\n",
              "      <td>3020.3680</td>\n",
              "      <td>1.90570</td>\n",
              "      <td>0.003108</td>\n",
              "      <td>0.31043</td>\n",
              "      <td>0.413750</td>\n",
              "      <td>1834.1052</td>\n",
              "      <td>2.4532</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>5.725000e-08</td>\n",
              "      <td>0.106184</td>\n",
              "      <td>0.131952</td>\n",
              "      <td>0.096894</td>\n",
              "      <td>240.7780</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GBM</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 725 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "              VOLUME_ET  VOLUME_NET  VOLUME_ED  ...  TGM_Cog_Z_6  TGM_T_6  label\n",
              "ID                                              ...                             \n",
              "TCGA-02-0006       1662         384      36268  ...          NaN      NaN    GBM\n",
              "TCGA-02-0009       4362        4349      15723  ...          NaN      NaN    GBM\n",
              "TCGA-02-0011      33404       48612      45798  ...          NaN      NaN    GBM\n",
              "TCGA-02-0027      12114        7587      34086  ...          NaN      NaN    GBM\n",
              "TCGA-02-0033      34538        7137      65653  ...          NaN      NaN    GBM\n",
              "\n",
              "[5 rows x 725 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gY9t_GtJ1KrG",
        "colab_type": "text"
      },
      "source": [
        "# Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nu6Fcr8N-tlM",
        "colab_type": "code",
        "outputId": "a0dc14ee-9d93-4d5d-ef53-7a66a79cb4e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        }
      },
      "source": [
        "# Drop columns which contain NaN values\n",
        "threshold = math.floor(len(data)/2)  # Calculate threshold, half of total rows\n",
        "data_drop = data.dropna(thresh=threshold, axis=1)  # Delete columns/features with more than 'threshold' NaNs\n",
        "data_drop = data_drop.fillna(data_drop.median())  # Replace the remaining NaNs with median of feature\n",
        "\n",
        "data_drop.isnull().values.any()  # Check if all the NaNs are deleted or replaced (False = there are no NaNs left)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0F45dLJCIa7l",
        "colab_type": "code",
        "outputId": "7035dd50-01db-4c7b-e3ab-909b858e0ed7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "source": [
        "# Split data and labels\n",
        "labels = data_drop['label']\n",
        "data_drop = data_drop.drop(columns=\"label\")  # Data without labels\n",
        "\n",
        "# Convert labels 'GBM' and 'LGG' to respectively 0 and 1\n",
        "label_encoder = LabelEncoder()\n",
        "labels = label_encoder.fit_transform(labels)\n",
        "\n",
        "# Replace strings and infinity values with median of feature\n",
        "data_no_strings = data_drop.replace('#DIV/0!', np.nan)\n",
        "data_no_strings = data_no_strings.replace([np.inf, -np.inf], np.nan)\n",
        "data_no_strings = data_no_strings.fillna(data_no_strings.median())\n",
        "\n",
        "# Split the data in a train (80%) and test set (20%)\n",
        "data_train, data_test, label_train, label_test = train_test_split(data_no_strings, labels, test_size=0.2, stratify=labels)\n",
        "\n",
        "# Feature scaling\n",
        "scaler = StandardScaler()\n",
        "transformer = scaler.fit(data_train.values)\n",
        "data_scaled_train = transformer.transform(data_train.values)\n",
        "data_df_train = pd.DataFrame(data_scaled_train, index = data_train.index, columns = data_train.columns)\n",
        "\n",
        "data_scaled_test = transformer.transform(data_test.values)\n",
        "data_df_test = pd.DataFrame(data_scaled_test, index = data_test.index, columns = data_test.columns)\n",
        "\n",
        "# PCA\n",
        "pca_plot = PCA().fit(data_df_train)\n",
        "plt.plot(np.cumsum(pca_plot.explained_variance_ratio_))\n",
        "plt.xlabel('number of components')\n",
        "plt.ylabel('cumulative explained variance');\n",
        "  # Training set\n",
        "pca_train = PCA(0.95)\n",
        "pca_train.fit(data_df_train)\n",
        "data_train_pca = pca_train.transform(data_df_train)\n",
        "  # Test set\n",
        "data_test_pca = pca_train.transform(data_df_test)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SWNE7t2iF56P",
        "colab_type": "text"
      },
      "source": [
        "# Visualising the training set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_A9WfhNQGABu",
        "colab_type": "code",
        "outputId": "c6c098cb-a737-4ed4-ac35-2d4374347f9b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        }
      },
      "source": [
        "# Visualising the trainingsdata with the first 2 Principal Components\n",
        "fig = plt.figure(figsize=(8, 8))\n",
        "ax = fig.add_subplot(111)\n",
        "ax.set_title(\"Two informative Principal Components\",\n",
        "             fontsize='small')\n",
        "ax.scatter(data_train_pca[:, 0], data_train_pca[:, 1], marker='o', c=label_train,\n",
        "           s=25, edgecolor='k', cmap=plt.cm.Paired)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7fa00277d6a0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 185
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ANFuoo-r_yek",
        "colab_type": "text"
      },
      "source": [
        "# Classifiers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6iBDajYWG_jR",
        "colab_type": "text"
      },
      "source": [
        "## k-Nearest-Neighbors"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CXYMeAvmyhBz",
        "colab_type": "text"
      },
      "source": [
        "### k-NN with PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yjD9zPASHD4s",
        "colab_type": "code",
        "outputId": "c274562b-12e3-496b-c60d-4b8f1598a1a6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 682
        }
      },
      "source": [
        "# Using different n_neighbors with weights = 'distance'\n",
        "print('Results when weights are based on distance:')\n",
        "n_neighbors=[1,5,7,10,11,15,20,50,100]\n",
        "for n_neighbor in n_neighbors:\n",
        "  clf = KNeighborsClassifier(n_neighbors=n_neighbor, weights='distance')\n",
        "  clf.fit(data_train_pca, label_train)\n",
        "\n",
        "  pred_train_knn = clf.predict(data_train_pca)\n",
        "  acc_train_knn = accuracy_score(label_train, pred_train_knn)\n",
        "  print ('Train set: {} neighbors gives an accuracy of {}'.format(n_neighbor, round(acc_train_knn,2)))\n",
        "\n",
        "  pred_test_knn = clf.predict(data_test_pca)\n",
        "  acc_test_knn = accuracy_score(label_test, pred_test_knn)\n",
        "  print ('Test set: {} neighbors gives an accuracy of {}'.format(n_neighbor, round(acc_train_knn,2)))\n",
        "\n",
        "# Using different n_neighbors with weights = 'uniform'\n",
        "print('\\n Results when weights are uniform:')\n",
        "n_neighbors=[1,5,7,10,11,15,20,50,100]\n",
        "for n_neighbor in n_neighbors:\n",
        "  clf = KNeighborsClassifier(n_neighbors=n_neighbor, weights='uniform')\n",
        "  clf.fit(data_train_pca, label_train)\n",
        "\n",
        "  pred_train_knn = clf.predict(data_train_pca)\n",
        "  acc_train_knn = accuracy_score(label_train, pred_train_knn)\n",
        "  print ('Train set: {} neighbors gives an accuracy of {}'.format(n_neighbor, round(acc_train_knn,2)))\n",
        "  \n",
        "  pred_test_knn = clf.predict(data_test_pca)\n",
        "  acc_test_knn = accuracy_score(label_test, pred_test_knn)\n",
        "  print ('Test set: {} neighbors gives an accuracy of {}'.format(n_neighbor, round(acc_train_knn,2)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Results when weights are based on distance:\n",
            "Train set: 1 neighbors gives an accuracy of 1.0\n",
            "Test set: 1 neighbors gives an accuracy of 1.0\n",
            "Train set: 5 neighbors gives an accuracy of 1.0\n",
            "Test set: 5 neighbors gives an accuracy of 1.0\n",
            "Train set: 7 neighbors gives an accuracy of 1.0\n",
            "Test set: 7 neighbors gives an accuracy of 1.0\n",
            "Train set: 10 neighbors gives an accuracy of 1.0\n",
            "Test set: 10 neighbors gives an accuracy of 1.0\n",
            "Train set: 11 neighbors gives an accuracy of 1.0\n",
            "Test set: 11 neighbors gives an accuracy of 1.0\n",
            "Train set: 15 neighbors gives an accuracy of 1.0\n",
            "Test set: 15 neighbors gives an accuracy of 1.0\n",
            "Train set: 20 neighbors gives an accuracy of 1.0\n",
            "Test set: 20 neighbors gives an accuracy of 1.0\n",
            "Train set: 50 neighbors gives an accuracy of 1.0\n",
            "Test set: 50 neighbors gives an accuracy of 1.0\n",
            "Train set: 100 neighbors gives an accuracy of 1.0\n",
            "Test set: 100 neighbors gives an accuracy of 1.0\n",
            "\n",
            " Results when weights are uniform:\n",
            "Train set: 1 neighbors gives an accuracy of 1.0\n",
            "Test set: 1 neighbors gives an accuracy of 1.0\n",
            "Train set: 5 neighbors gives an accuracy of 0.92\n",
            "Test set: 5 neighbors gives an accuracy of 0.92\n",
            "Train set: 7 neighbors gives an accuracy of 0.86\n",
            "Test set: 7 neighbors gives an accuracy of 0.86\n",
            "Train set: 10 neighbors gives an accuracy of 0.81\n",
            "Test set: 10 neighbors gives an accuracy of 0.81\n",
            "Train set: 11 neighbors gives an accuracy of 0.83\n",
            "Test set: 11 neighbors gives an accuracy of 0.83\n",
            "Train set: 15 neighbors gives an accuracy of 0.8\n",
            "Test set: 15 neighbors gives an accuracy of 0.8\n",
            "Train set: 20 neighbors gives an accuracy of 0.77\n",
            "Test set: 20 neighbors gives an accuracy of 0.77\n",
            "Train set: 50 neighbors gives an accuracy of 0.7\n",
            "Test set: 50 neighbors gives an accuracy of 0.7\n",
            "Train set: 100 neighbors gives an accuracy of 0.61\n",
            "Test set: 100 neighbors gives an accuracy of 0.61\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TDIepeN9JT14",
        "colab_type": "code",
        "outputId": "ac30ac06-2c6c-44a7-af87-dfb108a84164",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 895
        }
      },
      "source": [
        "# Hyperparameter optimization of number of neighbors and weights with PCA\n",
        "\n",
        "# Parameter distributions, to optimize the number of neighbors and the weights\n",
        "param_distributions = {'n_neighbors': [1,5,7,10,11,15,20,50,100], 'weights': ['uniform','distance']} \n",
        "    \n",
        "# Execute RandomizedSearchCV to find optimal parameters\n",
        "clf_knn = RandomizedSearchCV(KNeighborsClassifier(), param_distributions, scoring='accuracy', cv=5, return_train_score=True)\n",
        "\n",
        "# Fit the classifier\n",
        "clf_knn.fit(data_train_pca, label_train)\n",
        "\n",
        "# The best parameters\n",
        "print(f'The best parameters are {clf_knn.best_params_} with a mean accuracy of {clf_knn.best_score_}')\n",
        "\n",
        "pd.DataFrame(clf_knn.cv_results_)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best parameters are {'weights': 'distance', 'n_neighbors': 5} with a mean accuracy of 0.8341880341880342\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean_fit_time</th>\n",
              "      <th>std_fit_time</th>\n",
              "      <th>mean_score_time</th>\n",
              "      <th>std_score_time</th>\n",
              "      <th>param_weights</th>\n",
              "      <th>param_n_neighbors</th>\n",
              "      <th>params</th>\n",
              "      <th>split0_test_score</th>\n",
              "      <th>split1_test_score</th>\n",
              "      <th>split2_test_score</th>\n",
              "      <th>split3_test_score</th>\n",
              "      <th>split4_test_score</th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>std_test_score</th>\n",
              "      <th>rank_test_score</th>\n",
              "      <th>split0_train_score</th>\n",
              "      <th>split1_train_score</th>\n",
              "      <th>split2_train_score</th>\n",
              "      <th>split3_train_score</th>\n",
              "      <th>split4_train_score</th>\n",
              "      <th>mean_train_score</th>\n",
              "      <th>std_train_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000771</td>\n",
              "      <td>0.000026</td>\n",
              "      <td>0.002534</td>\n",
              "      <td>0.000065</td>\n",
              "      <td>uniform</td>\n",
              "      <td>15</td>\n",
              "      <td>{'weights': 'uniform', 'n_neighbors': 15}</td>\n",
              "      <td>0.814815</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0.740741</td>\n",
              "      <td>0.846154</td>\n",
              "      <td>0.653846</td>\n",
              "      <td>0.766667</td>\n",
              "      <td>0.066574</td>\n",
              "      <td>5</td>\n",
              "      <td>0.773585</td>\n",
              "      <td>0.830189</td>\n",
              "      <td>0.773585</td>\n",
              "      <td>0.785047</td>\n",
              "      <td>0.794393</td>\n",
              "      <td>0.791360</td>\n",
              "      <td>0.020922</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.000420</td>\n",
              "      <td>0.000007</td>\n",
              "      <td>0.002302</td>\n",
              "      <td>0.000039</td>\n",
              "      <td>uniform</td>\n",
              "      <td>100</td>\n",
              "      <td>{'weights': 'uniform', 'n_neighbors': 100}</td>\n",
              "      <td>0.592593</td>\n",
              "      <td>0.592593</td>\n",
              "      <td>0.629630</td>\n",
              "      <td>0.615385</td>\n",
              "      <td>0.615385</td>\n",
              "      <td>0.609117</td>\n",
              "      <td>0.014460</td>\n",
              "      <td>9</td>\n",
              "      <td>0.613208</td>\n",
              "      <td>0.613208</td>\n",
              "      <td>0.603774</td>\n",
              "      <td>0.607477</td>\n",
              "      <td>0.607477</td>\n",
              "      <td>0.609028</td>\n",
              "      <td>0.003670</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.000727</td>\n",
              "      <td>0.000017</td>\n",
              "      <td>0.002474</td>\n",
              "      <td>0.000054</td>\n",
              "      <td>uniform</td>\n",
              "      <td>11</td>\n",
              "      <td>{'weights': 'uniform', 'n_neighbors': 11}</td>\n",
              "      <td>0.851852</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0.740741</td>\n",
              "      <td>0.807692</td>\n",
              "      <td>0.692308</td>\n",
              "      <td>0.774074</td>\n",
              "      <td>0.054754</td>\n",
              "      <td>4</td>\n",
              "      <td>0.801887</td>\n",
              "      <td>0.849057</td>\n",
              "      <td>0.801887</td>\n",
              "      <td>0.822430</td>\n",
              "      <td>0.813084</td>\n",
              "      <td>0.817669</td>\n",
              "      <td>0.017476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.000749</td>\n",
              "      <td>0.000026</td>\n",
              "      <td>0.001595</td>\n",
              "      <td>0.000150</td>\n",
              "      <td>distance</td>\n",
              "      <td>7</td>\n",
              "      <td>{'weights': 'distance', 'n_neighbors': 7}</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>0.740741</td>\n",
              "      <td>0.814815</td>\n",
              "      <td>0.807692</td>\n",
              "      <td>0.730769</td>\n",
              "      <td>0.796581</td>\n",
              "      <td>0.057317</td>\n",
              "      <td>2</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.000684</td>\n",
              "      <td>0.000085</td>\n",
              "      <td>0.002291</td>\n",
              "      <td>0.000297</td>\n",
              "      <td>uniform</td>\n",
              "      <td>10</td>\n",
              "      <td>{'weights': 'uniform', 'n_neighbors': 10}</td>\n",
              "      <td>0.814815</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0.740741</td>\n",
              "      <td>0.807692</td>\n",
              "      <td>0.692308</td>\n",
              "      <td>0.766667</td>\n",
              "      <td>0.045445</td>\n",
              "      <td>5</td>\n",
              "      <td>0.773585</td>\n",
              "      <td>0.820755</td>\n",
              "      <td>0.792453</td>\n",
              "      <td>0.785047</td>\n",
              "      <td>0.813084</td>\n",
              "      <td>0.796985</td>\n",
              "      <td>0.017520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.000386</td>\n",
              "      <td>0.000037</td>\n",
              "      <td>0.001383</td>\n",
              "      <td>0.000127</td>\n",
              "      <td>distance</td>\n",
              "      <td>100</td>\n",
              "      <td>{'weights': 'distance', 'n_neighbors': 100}</td>\n",
              "      <td>0.592593</td>\n",
              "      <td>0.592593</td>\n",
              "      <td>0.629630</td>\n",
              "      <td>0.615385</td>\n",
              "      <td>0.615385</td>\n",
              "      <td>0.609117</td>\n",
              "      <td>0.014460</td>\n",
              "      <td>9</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.000754</td>\n",
              "      <td>0.000006</td>\n",
              "      <td>0.002685</td>\n",
              "      <td>0.000055</td>\n",
              "      <td>uniform</td>\n",
              "      <td>50</td>\n",
              "      <td>{'weights': 'uniform', 'n_neighbors': 50}</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.703704</td>\n",
              "      <td>0.629630</td>\n",
              "      <td>0.615385</td>\n",
              "      <td>0.615385</td>\n",
              "      <td>0.646154</td>\n",
              "      <td>0.034349</td>\n",
              "      <td>8</td>\n",
              "      <td>0.622642</td>\n",
              "      <td>0.650943</td>\n",
              "      <td>0.632075</td>\n",
              "      <td>0.672897</td>\n",
              "      <td>0.672897</td>\n",
              "      <td>0.650291</td>\n",
              "      <td>0.020585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.000706</td>\n",
              "      <td>0.000010</td>\n",
              "      <td>0.001444</td>\n",
              "      <td>0.000026</td>\n",
              "      <td>distance</td>\n",
              "      <td>5</td>\n",
              "      <td>{'weights': 'distance', 'n_neighbors': 5}</td>\n",
              "      <td>0.925926</td>\n",
              "      <td>0.740741</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>0.846154</td>\n",
              "      <td>0.769231</td>\n",
              "      <td>0.834188</td>\n",
              "      <td>0.070004</td>\n",
              "      <td>1</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.000676</td>\n",
              "      <td>0.000089</td>\n",
              "      <td>0.002290</td>\n",
              "      <td>0.000317</td>\n",
              "      <td>uniform</td>\n",
              "      <td>20</td>\n",
              "      <td>{'weights': 'uniform', 'n_neighbors': 20}</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0.740741</td>\n",
              "      <td>0.740741</td>\n",
              "      <td>0.807692</td>\n",
              "      <td>0.692308</td>\n",
              "      <td>0.751852</td>\n",
              "      <td>0.038943</td>\n",
              "      <td>7</td>\n",
              "      <td>0.764151</td>\n",
              "      <td>0.792453</td>\n",
              "      <td>0.754717</td>\n",
              "      <td>0.766355</td>\n",
              "      <td>0.785047</td>\n",
              "      <td>0.772545</td>\n",
              "      <td>0.013994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.000517</td>\n",
              "      <td>0.000014</td>\n",
              "      <td>0.001714</td>\n",
              "      <td>0.000055</td>\n",
              "      <td>uniform</td>\n",
              "      <td>7</td>\n",
              "      <td>{'weights': 'uniform', 'n_neighbors': 7}</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>0.740741</td>\n",
              "      <td>0.814815</td>\n",
              "      <td>0.807692</td>\n",
              "      <td>0.730769</td>\n",
              "      <td>0.796581</td>\n",
              "      <td>0.057317</td>\n",
              "      <td>2</td>\n",
              "      <td>0.849057</td>\n",
              "      <td>0.839623</td>\n",
              "      <td>0.820755</td>\n",
              "      <td>0.841121</td>\n",
              "      <td>0.859813</td>\n",
              "      <td>0.842074</td>\n",
              "      <td>0.012844</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   mean_fit_time  std_fit_time  ...  mean_train_score  std_train_score\n",
              "0       0.000771      0.000026  ...          0.791360         0.020922\n",
              "1       0.000420      0.000007  ...          0.609028         0.003670\n",
              "2       0.000727      0.000017  ...          0.817669         0.017476\n",
              "3       0.000749      0.000026  ...          1.000000         0.000000\n",
              "4       0.000684      0.000085  ...          0.796985         0.017520\n",
              "5       0.000386      0.000037  ...          1.000000         0.000000\n",
              "6       0.000754      0.000006  ...          0.650291         0.020585\n",
              "7       0.000706      0.000010  ...          1.000000         0.000000\n",
              "8       0.000676      0.000089  ...          0.772545         0.013994\n",
              "9       0.000517      0.000014  ...          0.842074         0.012844\n",
              "\n",
              "[10 rows x 22 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 187
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "prh3ZaQoWbkK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Fitting the K-NN Classifier\n",
        "KNN = KNeighborsClassifier(n_neighbors=5, weights='uniform')\n",
        "KNN.fit(data_train_pca, label_train)\n",
        "\n",
        "# Predictions\n",
        "train_pred_knn = KNN.predict(data_train_pca)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3m_gEMYgW7eo",
        "colab_type": "code",
        "outputId": "eaa0c78b-b20b-491f-f81d-de11fe4ac422",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "source": [
        "# Evaluate KNN using cross-validation\n",
        "score_knn = cross_val_score(KNN, data_train_pca, label_train, cv=5)\n",
        "mean_score_knn = score_knn.mean()\n",
        "\n",
        "print(f'The accuracy of the validation set in 5 different folds is {score_knn}')\n",
        "print(f'\\n The mean accuracy of the validation set of 5 different folds is {round(mean_score_knn,2)}')\n",
        "\n",
        "# Evaluate accuracy of KNN on training set\n",
        "acc_train_knn = accuracy_score(label_train, train_pred_knn)\n",
        "print(f'\\n The accuracy of the training set is {round(acc_train_knn,2)}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The accuracy of the validation set in 5 different folds is [0.92592593 0.74074074 0.88888889 0.84615385 0.76923077]\n",
            "\n",
            " The mean accuracy of the validation set of 5 different folds is 0.83\n",
            "\n",
            " The accuracy of the training set is 0.92\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9JgSmsPxiHHq",
        "colab_type": "code",
        "outputId": "adec290f-13ca-4de7-bab5-e9ae906eea36",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "# Confusion matrices and classification reports of trainings data\n",
        "print('Confusion matrix and classification report of training set')\n",
        "print(confusion_matrix(label_train, train_pred_knn))\n",
        "print(classification_report(label_train, train_pred_knn))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix and classification report of training set\n",
            "[[79  2]\n",
            " [ 9 43]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.98      0.93        81\n",
            "           1       0.96      0.83      0.89        52\n",
            "\n",
            "    accuracy                           0.92       133\n",
            "   macro avg       0.93      0.90      0.91       133\n",
            "weighted avg       0.92      0.92      0.92       133\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zWWd0nzQPEfa",
        "colab_type": "text"
      },
      "source": [
        "## Random Forest Classifier"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wCVShgspj-lQ",
        "colab_type": "text"
      },
      "source": [
        "### Random Forest with PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FA1o4T0F6lOy",
        "colab_type": "code",
        "outputId": "f13ce2bb-7ae8-4eee-cefa-b462aa57148e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 736
        }
      },
      "source": [
        "# Hyperparameter optimization: trying out different amount of trees and compare bootstrapping True and False.\n",
        "\n",
        "#using different n_trees and bootstrapping  \n",
        "print('Results when bootstrapping=True')\n",
        "n_trees=[1,5,10,15,20,30,50,100,150,200]\n",
        "for n_tree in n_trees:\n",
        "  clf = RandomForestClassifier(n_estimators=n_tree, bootstrap=True)\n",
        "  clf.fit(data_train_pca,label_train)\n",
        "  \n",
        "  predictions_train = clf.predict(data_train_pca)\n",
        "  acc_train_RF = accuracy_score(label_train, predictions_train)\n",
        "  \n",
        "  print ('Train set: {} trees gives an accuracy of {}'.format(n_tree, round(acc_train_RF,2)))\n",
        "\n",
        "  predictions_test = clf.predict(data_test_pca)\n",
        "  acc_test_RF = accuracy_score(label_test, predictions_test)\n",
        "\n",
        "  print ('Test set: {} trees gives an accuracy of {}'.format(n_tree, round(acc_test_RF, 2)))\n",
        "\n",
        "print ('')\n",
        "\n",
        "#using different n_trees without bootstrapping \n",
        "print('Results when bootstrapping=False')\n",
        "for n_tree in n_trees:\n",
        "  clf = RandomForestClassifier(n_estimators=n_tree, bootstrap=False)\n",
        "  clf.fit(data_train_pca,label_train)\n",
        "  \n",
        "  predictions_train = clf.predict(data_train_pca)\n",
        "  acc_train_RF = accuracy_score(label_train, predictions_train)\n",
        "  print ('Train set: {} trees gives an accuracy of {}'.format(n_tree,round(acc_train_RF,2)))\n",
        "\n",
        "  predictions_test = clf.predict(data_test_pca)\n",
        "  acc_test_RF = accuracy_score(label_test, predictions_test)\n",
        "\n",
        "  print ('Test set: {} trees gives an accuracy of {}'.format(n_tree,round(acc_test_RF,2)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Results when bootstrapping=True\n",
            "Train set: 1 trees gives an accuracy of 0.86\n",
            "Test set: 1 trees gives an accuracy of 0.71\n",
            "Train set: 5 trees gives an accuracy of 0.99\n",
            "Test set: 5 trees gives an accuracy of 0.65\n",
            "Train set: 10 trees gives an accuracy of 1.0\n",
            "Test set: 10 trees gives an accuracy of 0.74\n",
            "Train set: 15 trees gives an accuracy of 1.0\n",
            "Test set: 15 trees gives an accuracy of 0.71\n",
            "Train set: 20 trees gives an accuracy of 0.99\n",
            "Test set: 20 trees gives an accuracy of 0.71\n",
            "Train set: 30 trees gives an accuracy of 1.0\n",
            "Test set: 30 trees gives an accuracy of 0.71\n",
            "Train set: 50 trees gives an accuracy of 1.0\n",
            "Test set: 50 trees gives an accuracy of 0.76\n",
            "Train set: 100 trees gives an accuracy of 1.0\n",
            "Test set: 100 trees gives an accuracy of 0.68\n",
            "Train set: 150 trees gives an accuracy of 1.0\n",
            "Test set: 150 trees gives an accuracy of 0.76\n",
            "Train set: 200 trees gives an accuracy of 1.0\n",
            "Test set: 200 trees gives an accuracy of 0.74\n",
            "\n",
            "Results when bootstrapping=False\n",
            "Train set: 1 trees gives an accuracy of 1.0\n",
            "Test set: 1 trees gives an accuracy of 0.65\n",
            "Train set: 5 trees gives an accuracy of 1.0\n",
            "Test set: 5 trees gives an accuracy of 0.76\n",
            "Train set: 10 trees gives an accuracy of 1.0\n",
            "Test set: 10 trees gives an accuracy of 0.59\n",
            "Train set: 15 trees gives an accuracy of 1.0\n",
            "Test set: 15 trees gives an accuracy of 0.71\n",
            "Train set: 20 trees gives an accuracy of 1.0\n",
            "Test set: 20 trees gives an accuracy of 0.74\n",
            "Train set: 30 trees gives an accuracy of 1.0\n",
            "Test set: 30 trees gives an accuracy of 0.74\n",
            "Train set: 50 trees gives an accuracy of 1.0\n",
            "Test set: 50 trees gives an accuracy of 0.71\n",
            "Train set: 100 trees gives an accuracy of 1.0\n",
            "Test set: 100 trees gives an accuracy of 0.79\n",
            "Train set: 150 trees gives an accuracy of 1.0\n",
            "Test set: 150 trees gives an accuracy of 0.74\n",
            "Train set: 200 trees gives an accuracy of 1.0\n",
            "Test set: 200 trees gives an accuracy of 0.76\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w27ZGUSg9TPx",
        "colab_type": "code",
        "outputId": "23c5d0a8-359c-4418-b525-1d6bf86cd9a4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        }
      },
      "source": [
        "# Hyperparameter optimization of Random Forest Classifier with PCA\n",
        "\n",
        "# Parameter distributions, to optimize the number of estimators, max features and max depth \n",
        "param_distributions = {'n_estimators': [1,5,10,15,20,30,50,100,150,200],\n",
        "                       'max_features': list(range(10,len(data_train_pca[1]),10)),\n",
        "                       'max_depth': list(range(10,50,10))} \n",
        "                        \n",
        "# Execute RandomizedSearchCV to find optimal parameters\n",
        "clf_rf = RandomizedSearchCV(RandomForestClassifier(bootstrap=True), param_distributions, scoring='accuracy', cv=5, return_train_score=True)\n",
        "\n",
        "# Fit the classifier\n",
        "clf_rf.fit(data_train_pca, label_train)\n",
        "\n",
        "# The best parameters\n",
        "print(f'The best parameters are {clf_rf.best_params_} with a mean accuracy of {clf_rf.best_score_}')\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best parameters are {'n_estimators': 100, 'max_features': 10, 'max_depth': 40} with a mean accuracy of 0.835042735042735\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VJb6pbVk4Pc1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Fitting the Random Forest classifier with PCA\n",
        "RF = RandomForestClassifier(n_estimators=50, max_features=40, max_depth=40, bootstrap=True)\n",
        "RF.fit(data_train_pca, label_train)\n",
        "\n",
        "# Predictions\n",
        "train_pred_RF = RF.predict(data_train_pca)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LAxcrYvhVM1d",
        "colab_type": "code",
        "outputId": "640af405-4c07-4bd6-db34-cd7dae74ac44",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "# Evaluate Random Forest using cross-validation\n",
        "score_rf = cross_val_score(RF, data_train_pca, label_train, cv=5)\n",
        "mean_score_rf = score_rf.mean()\n",
        "\n",
        "print(f'\\n The accuracy of the validation set in 5 different folds is {score_rf}')\n",
        "print(f'\\n The mean accuracy of the validation set of 5 different folds is {round(mean_score_rf,2)}')\n",
        "\n",
        "# Evaluate accuracy of Random Forest Classifier on training set\n",
        "acc_train_RF = accuracy_score(label_train, train_pred_RF)\n",
        "print(f'\\n The accuracy on the training set is {round(acc_train_RF, 2)}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " The accuracy of the validation set in 5 different folds is [0.81481481 0.74074074 0.74074074 0.61538462 0.80769231]\n",
            "\n",
            " The mean accuracy of the validation set of 5 different folds is 0.74\n",
            "\n",
            " The accuracy on the training set is 1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QDVEd0zhh3Vu",
        "colab_type": "code",
        "outputId": "b75e855f-e694-4a47-89c8-b6745764206e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "# Confusion matrices and classification reports of trainings data\n",
        "print('Confusion matrix and classification report of training set')\n",
        "print(confusion_matrix(label_train, train_pred_RF))\n",
        "print(classification_report(label_train, train_pred_RF))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix and classification report of training set\n",
            "[[81  0]\n",
            " [ 0 52]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        81\n",
            "           1       1.00      1.00      1.00        52\n",
            "\n",
            "    accuracy                           1.00       133\n",
            "   macro avg       1.00      1.00      1.00       133\n",
            "weighted avg       1.00      1.00      1.00       133\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Yd-arh0kCLd",
        "colab_type": "text"
      },
      "source": [
        "### Random Forest with Feature Importances"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NwVNtBTOhoMD",
        "colab_type": "code",
        "outputId": "f3b62086-bfc9-4f40-8786-21a81ad740ea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        }
      },
      "source": [
        "# Feature_Importances\n",
        "estimator_fi = RandomForestClassifier()\n",
        "estimator_fi.fit(data_df_train, label_train)\n",
        "importances = estimator_fi.feature_importances_\n",
        "std = np.std([tree.feature_importances_ for tree in estimator_fi.estimators_], axis=0)\n",
        "indices = np.argsort(importances)[::-1]\n",
        "\n",
        "# Print the feature ranking\n",
        "# print(\"Feature ranking:\")\n",
        "\n",
        "# for f in range(data_df_train.shape[1]):\n",
        "#     print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))\n",
        "\n",
        "# Plot the feature importances of the forest\n",
        "plt.figure()\n",
        "plt.title(\"Feature importances\")\n",
        "plt.bar(range(data_df_train.shape[1]), importances[indices],\n",
        "       color=\"r\", yerr=std[indices], align=\"center\")\n",
        "plt.xticks(range(data_df_train.shape[1]), indices)\n",
        "plt.xlim([-1, data_df_train.shape[1]])\n",
        "plt.show()\n",
        "\n",
        "# Only keep features with importance > 0.001\n",
        "  # Training set\n",
        "mask = importances > 0.001\n",
        "mask2 = data_df_train.columns[mask]\n",
        "data_train_selection = data_df_train[mask2]\n",
        "  # Test set\n",
        "data_test_selection = data_df_test[mask2]\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iZT2-xi60RQM",
        "colab_type": "code",
        "outputId": "9fb59879-e282-4ee1-9923-1c69c4fd92bf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Hyperparameter optimization of Random Forest with 'Feature Importances'\n",
        "\n",
        "# Execute RandomizedSearchCV to find optimal parameters\n",
        "clf_fi = RandomizedSearchCV(estimator_fi, param_distributions, scoring='accuracy', cv=5, return_train_score=True)\n",
        "\n",
        "# Fit the classifier\n",
        "clf_fi.fit(data_train_selection, label_train)\n",
        "\n",
        "# The best parameters\n",
        "print(f'The best parameters are {clf_fi.best_params_} with a mean accuracy of {clf_fi.best_score_}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best parameters are {'n_estimators': 15, 'max_features': 20, 'max_depth': 10} with a mean accuracy of 0.8874643874643875\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mwQROBTF0VF7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Fit the classifier on the selected features\n",
        "FI = RandomForestClassifier(n_estimators=10, max_features=60, max_depth=10, bootstrap=True)\n",
        "FI.fit(data_train_selection, label_train)\n",
        "\n",
        "# Predictions\n",
        "train_pred_fi = FI.predict(data_train_selection)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zvYo0A91kGAx",
        "colab_type": "code",
        "outputId": "5965a912-539f-4fc1-d81c-8c75e390bad6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "# Evaluate Random Forest using cross-validation\n",
        "score_fi = cross_val_score(FI, data_train_selection, label_train, cv=5)\n",
        "mean_score_fi = score_fi.mean()\n",
        "\n",
        "print(f'\\n The accuracy of the validation set in 5 different folds is {score_fi}')\n",
        "print(f'\\n The mean accuracy of the validation set of 5 different folds is {round(mean_score_fi,2)}')\n",
        "\n",
        "# Evaluate accuracy of Random Forest Classifier on training set\n",
        "acc_train_fi = accuracy_score(label_train, train_pred_fi)\n",
        "print(f'\\n The accuracy on the training set is {round(acc_train_fi, 2)}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " The accuracy of the validation set in 5 different folds is [0.96296296 0.81481481 0.85185185 0.88461538 0.92307692]\n",
            "\n",
            " The mean accuracy of the validation set of 5 different folds is 0.89\n",
            "\n",
            " The accuracy on the training set is 0.98\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BMrulvXMkLgn",
        "colab_type": "code",
        "outputId": "147501c4-7a33-40aa-be1c-ac32b51e471b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "# Confusion matrices and classification reports of trainings data\n",
        "print('Confusion matrix and classification report of training set')\n",
        "print(confusion_matrix(label_train, train_pred_fi))\n",
        "print(classification_report(label_train, train_pred_fi))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix and classification report of training set\n",
            "[[80  1]\n",
            " [ 1 51]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.99      0.99      0.99        81\n",
            "           1       0.98      0.98      0.98        52\n",
            "\n",
            "    accuracy                           0.98       133\n",
            "   macro avg       0.98      0.98      0.98       133\n",
            "weighted avg       0.98      0.98      0.98       133\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gL04AA6EH9_7",
        "colab_type": "text"
      },
      "source": [
        "## Support Vector Machine"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sCZWDiaAsRzE",
        "colab_type": "text"
      },
      "source": [
        "### SVM with PCA "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CrU_YknbHARw",
        "colab_type": "code",
        "outputId": "82d09629-f8be-40a1-edcb-f5777f7b21fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        }
      },
      "source": [
        "# Hyperparameter optimization of SVM with PCA\n",
        "\n",
        "# Parameter distributions, to optimize the degree, coef0, slack, gamma and the kernel\n",
        "degrees = [1, 3, 5]\n",
        "coef0s = [1, 0.5, 0.01]\n",
        "slacks = [0.1, 1, 10, 100]\n",
        "gammas = [1, 0.1 ,0.01, 0.001]\n",
        "kernels = ['linear', 'rbf', 'poly']\n",
        "\n",
        "# Creating paramater space\n",
        "param_grid = {'degree': degrees,'coef0': coef0s, 'C': slacks, 'gamma': gammas, 'kernel': kernels}\n",
        "\n",
        "# Execute RandomizedSearchCV to find optimal parameters\n",
        "clf_svm = RandomizedSearchCV(SVC(),param_grid, scoring='accuracy', cv=5, return_train_score=True)\n",
        "\n",
        "# Fit the classifier\n",
        "clf_svm.fit(data_train_pca, label_train)\n",
        "\n",
        "# The best parameters\n",
        "print(f'The best parameters are {clf_svm.best_params_} with a mean accuracy of {clf_svm.best_score_}')\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best parameters are {'kernel': 'linear', 'gamma': 0.01, 'degree': 1, 'coef0': 0.5, 'C': 0.1} with a mean accuracy of 0.8649572649572649\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s0Zzz85DYOKV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Fitting the Support Vector Machine classifier\n",
        "SVM = SVC(C=10, kernel='linear', degree=1, gamma=0.001, coef0=0.01)\n",
        "SVM.fit(data_train_pca, label_train)\n",
        "\n",
        "# Predictions\n",
        "train_pred_svm = SVM.predict(data_train_pca)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WroktlYhUyat",
        "colab_type": "code",
        "outputId": "6acb60de-8482-4fb4-e643-3ac5bbae837d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "source": [
        "# Evaluate the SVM classifier using cross-validation\n",
        "score_svm = cross_val_score(SVM, data_train_pca, label_train, cv=5)\n",
        "mean_score_svm = score_svm.mean()\n",
        "\n",
        "print(f'The accuracy of the validation set in 5 different folds is {score_svm}')\n",
        "print(f'\\n The mean accuracy of the validation set of 5 different folds is {round(mean_score_svm,2)}')\n",
        "\n",
        "# Evaluate accuracy of SVM on training set\n",
        "acc_train_svm = accuracy_score(label_train, train_pred_svm)\n",
        "print(f'\\n The accuracy of the training set is {round(acc_train_svm,2)}')\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The accuracy of the validation set in 5 different folds is [0.85185185 0.85185185 0.81481481 0.92307692 0.84615385]\n",
            "\n",
            " The mean accuracy of the validation set of 5 different folds is 0.86\n",
            "\n",
            " The accuracy of the training set is 1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dt_WPxIpgcvH",
        "colab_type": "code",
        "outputId": "e7ac85d7-ef8b-49a5-bb6f-5abf57c05005",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "# Confusion matrix and classification reports of trainings data\n",
        "print('Confusion matrix and classification report of training set')\n",
        "print(confusion_matrix(label_train, train_pred_svm))\n",
        "print(classification_report(label_train, train_pred_svm))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix and classification report of training set\n",
            "[[81  0]\n",
            " [ 0 52]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        81\n",
            "           1       1.00      1.00      1.00        52\n",
            "\n",
            "    accuracy                           1.00       133\n",
            "   macro avg       1.00      1.00      1.00       133\n",
            "weighted avg       1.00      1.00      1.00       133\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jwsWtFaIsiOf",
        "colab_type": "text"
      },
      "source": [
        "### SVM with RFECV"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tBKUUGJ5skQm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# RFECV\n",
        "estimator = SVC(kernel='linear')\n",
        "selector = RFECV(estimator, step=1, cv=5)\n",
        "selector = selector.fit(data_df_train, label_train)\n",
        "mask = selector.support_\n",
        "RFECV_columns = data_df_train.columns[mask]\n",
        "\n",
        "# Feature selection\n",
        "  # Training set\n",
        "data_train_RFECV = data_df_train[RFECV_columns]\n",
        "  # Test set\n",
        "data_test_RFECV = data_df_test[RFECV_columns]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T7VaSeggwegM",
        "colab_type": "code",
        "outputId": "397cdff8-ce04-4eda-b442-dc4730694d64",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Hyperparameter optimization of SVM with RFECV\n",
        "\n",
        "# Execute RandomizedSearchCV to find optimal parameters\n",
        "clf_svmlin = RandomizedSearchCV(estimator, param_grid, scoring='accuracy', cv=5, return_train_score=True)\n",
        "\n",
        "# Fit the classifier\n",
        "clf_svmlin.fit(data_train_RFECV, label_train)\n",
        "\n",
        "# The best parameters\n",
        "print(f'The best parameters are {clf_svmlin.best_params_} with a mean accuracy of {clf_svmlin.best_score_}')\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best parameters are {'kernel': 'poly', 'gamma': 1, 'degree': 1, 'coef0': 1, 'C': 10} with a mean accuracy of 1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yvd1lPeYwgh-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Fit the classifier on the selected features\n",
        "SVMLIN = SVC(C=0.1, kernel='linear', degree=1, gamma=1, coef0=0.5)\n",
        "SVMLIN.fit(data_train_RFECV, label_train)\n",
        "\n",
        "# Predictions\n",
        "train_pred_rfecv = SVMLIN.predict(data_train_RFECV)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Am5qThTxNLLj",
        "colab_type": "code",
        "outputId": "af9ff3e2-8ec8-4f76-fece-ab2aa456dcfd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "# Evaluate SVM using cross-validation\n",
        "score_rfecv = cross_val_score(SVMLIN, data_train_RFECV, label_train, cv=5)\n",
        "mean_score_rfecv = score_rfecv.mean()\n",
        "\n",
        "print(f'\\n The accuracy of the validation set in 5 different folds is {score_rfecv}')\n",
        "print(f'\\n The mean accuracy of the validation set of 5 different folds is {round(mean_score_rfecv,2)}')\n",
        "\n",
        "# Evaluate accuracy of SVM on training set\n",
        "acc_train_rfecv = accuracy_score(label_train, train_pred_rfecv)\n",
        "print(f'\\n The accuracy on the training set is {round(acc_train_rfecv, 2)}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " The accuracy of the validation set in 5 different folds is [1.         1.         1.         1.         0.96153846]\n",
            "\n",
            " The mean accuracy of the validation set of 5 different folds is 0.99\n",
            "\n",
            " The accuracy on the training set is 1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9ONHw-ZQLuWG",
        "colab_type": "code",
        "outputId": "52f85e76-8ef7-4ac2-a26d-587eed7549a2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "# Confusion matrices and classification reports of trainings data\n",
        "print('Confusion matrix and classification report of training set')\n",
        "print(confusion_matrix(label_train, train_pred_rfecv))\n",
        "print(classification_report(label_train, train_pred_rfecv))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix and classification report of training set\n",
            "[[81  0]\n",
            " [ 0 52]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        81\n",
            "           1       1.00      1.00      1.00        52\n",
            "\n",
            "    accuracy                           1.00       133\n",
            "   macro avg       1.00      1.00      1.00       133\n",
            "weighted avg       1.00      1.00      1.00       133\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nSEXIhNo9jtU",
        "colab_type": "text"
      },
      "source": [
        "## Neural Networks"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bODUN5a09lfX",
        "colab_type": "code",
        "outputId": "bc908b30-7bed-4cfa-8a6a-bdce227ff552",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Hyperparameter optimization of Neural Network with PCA\n",
        "\n",
        "# Parameter distributions, to optimize the hidden layer sizes, alpha and the learning rate\n",
        "parameter_space = {\n",
        "    'hidden_layer_sizes': [(50,50,50), (50,100,50), (100,), (7,2), (7,7,7),(9,9,9,9),(50,50,50,50), (50,50,50,50,50)],\n",
        "    'alpha': [0.0001, 0.05],\n",
        "    'learning_rate': ['constant','adaptive'],\n",
        "}\n",
        "    \n",
        "# Execute RandomizedSearchCV to find optimal parameters\n",
        "clf_mlp = RandomizedSearchCV(MLPClassifier(solver='lbfgs', max_iter=8000), parameter_space, scoring='accuracy', cv=5, return_train_score=True)  # Verbose=2 & refit=True uitzoeken\n",
        "\n",
        "# Fit the classifier\n",
        "clf_mlp.fit(data_train_pca, label_train)\n",
        "\n",
        "# The best parameters\n",
        "print(f'The best parameters are {clf_mlp.best_params_} with a mean accuracy of {clf_mlp.best_score_}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The best parameters are {'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.05} with a mean accuracy of 0.9022792022792021\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VuBiRAuB96Yf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Fitting the Neural Network Classifier with optimal hyperparameters\n",
        "MLP = MLPClassifier(solver='lbfgs', learning_rate='constant',hidden_layer_sizes=(100,), alpha=0.05, activation='relu', max_iter=1000)\n",
        "MLP.fit(data_train_pca, label_train)\n",
        "\n",
        "# Predictions\n",
        "train_pred_MLP = MLP.predict(data_train_pca)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AiVEssBr98he",
        "colab_type": "code",
        "outputId": "cf35a215-e17d-4557-d37c-7b2c7e295345",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "# Evaluate neural network using cross-validation\n",
        "score = cross_val_score(MLP, data_train_pca, label_train, cv=5)\n",
        "mean_score = score.mean()\n",
        "\n",
        "print(f'\\n The accuracy of the validation set in 5 different folds is {score}')\n",
        "print(f'\\n The mean accuracy of the validation set of 5 different folds is {round(mean_score,2)}')\n",
        "\n",
        "# Evaluate accuracy of neural network on training set\n",
        "acc_train_MLP = accuracy_score(label_train, train_pred_MLP)\n",
        "print(f'\\n The accuracy of the training set is {round(acc_train_MLP,2)}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " The accuracy of the validation set in 5 different folds is [0.96296296 0.81481481 0.88888889 0.92307692 0.88461538]\n",
            "\n",
            " The mean accuracy of the validation set of 5 different folds is 0.89\n",
            "\n",
            " The accuracy of the training set is 1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KjjObAu39_wV",
        "colab_type": "code",
        "outputId": "71aa5b9d-3513-4782-a269-5d7f54a347e3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "# Confusion matrices and classification reports of training data\n",
        "print('Confusion matrix and classification report of training set')\n",
        "print(confusion_matrix(label_train, train_pred_MLP))\n",
        "print(classification_report(label_train, train_pred_MLP))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix and classification report of training set\n",
            "[[81  0]\n",
            " [ 0 52]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        81\n",
            "           1       1.00      1.00      1.00        52\n",
            "\n",
            "    accuracy                           1.00       133\n",
            "   macro avg       1.00      1.00      1.00       133\n",
            "weighted avg       1.00      1.00      1.00       133\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hwGUOWXusaFh",
        "colab_type": "text"
      },
      "source": [
        "# Evaluation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qnOQalC5-Zmb",
        "colab_type": "text"
      },
      "source": [
        "## Accuracies on test data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QlafV3sn-dvE",
        "colab_type": "code",
        "outputId": "73a2677c-3e9f-460f-b844-6506b1ce708d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        }
      },
      "source": [
        "# K-NN with PCA - evaluation\n",
        "\n",
        "# Evaluate accuracy of KNN on test set\n",
        "test_pred_knn = KNN.predict(data_test_pca)\n",
        "acc_test_knn = accuracy_score(label_test, test_pred_knn)\n",
        "print(f'\\n The accuracy of the test set is {round(acc_test_knn,2)}')\n",
        "\n",
        "# Confusion matrices and classification reports of test data\n",
        "print('Confusion matrix and classification report of test set')\n",
        "print(confusion_matrix(label_test, test_pred_knn))\n",
        "print(classification_report(label_test, test_pred_knn))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " The accuracy of the test set is 0.88\n",
            "Confusion matrix and classification report of test set\n",
            "[[20  1]\n",
            " [ 3 10]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.87      0.95      0.91        21\n",
            "           1       0.91      0.77      0.83        13\n",
            "\n",
            "    accuracy                           0.88        34\n",
            "   macro avg       0.89      0.86      0.87        34\n",
            "weighted avg       0.88      0.88      0.88        34\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wZGZf_ogll5T",
        "colab_type": "code",
        "outputId": "9838c574-8350-4f27-e119-566268e5d7ea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        }
      },
      "source": [
        "# Random Forest with 'Feature Importances' - evaluation\n",
        "\n",
        "# Evaluate accuracy of Random Forest Classifier on test set\n",
        "test_pred_fi = FI.predict(data_test_selection)\n",
        "acc_test_fi = accuracy_score(label_test, test_pred_fi)\n",
        "print(f'\\n The accuracy on the test set is {round(acc_test_fi, 2)}')\n",
        "\n",
        "# Confusion matrices and classification reports of test data\n",
        "print('Confusion matrix and classification report of test set')\n",
        "print(confusion_matrix(label_test, test_pred_fi))\n",
        "print(classification_report(label_test, test_pred_fi))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " The accuracy on the test set is 0.94\n",
            "Confusion matrix and classification report of test set\n",
            "[[20  1]\n",
            " [ 1 12]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.95      0.95        21\n",
            "           1       0.92      0.92      0.92        13\n",
            "\n",
            "    accuracy                           0.94        34\n",
            "   macro avg       0.94      0.94      0.94        34\n",
            "weighted avg       0.94      0.94      0.94        34\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G5Gjj5JTAofG",
        "colab_type": "code",
        "outputId": "7a791dd3-6bb2-4dd2-ebf6-a210fe33d8b6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        }
      },
      "source": [
        "# SVM with RFECV - evaluation\n",
        "\n",
        "# Evaluate accuracy of SVM on test set\n",
        "test_pred_rfecv = SVMLIN.predict(data_test_RFECV)\n",
        "acc_test_rfecv = accuracy_score(label_test, test_pred_rfecv)\n",
        "print(f'\\n The accuracy of the test set is {round(acc_test_rfecv,2)}')\n",
        "\n",
        "# Confusion matrices and classification reports of test data\n",
        "print('Confusion matrix and classification report of test set')\n",
        "print(confusion_matrix(label_test, test_pred_rfecv))\n",
        "print(classification_report(label_test, test_pred_rfecv))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " The accuracy of the test set is 0.88\n",
            "Confusion matrix and classification report of test set\n",
            "[[19  2]\n",
            " [ 2 11]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.90      0.90        21\n",
            "           1       0.85      0.85      0.85        13\n",
            "\n",
            "    accuracy                           0.88        34\n",
            "   macro avg       0.88      0.88      0.88        34\n",
            "weighted avg       0.88      0.88      0.88        34\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6gsA9rJjAqNm",
        "colab_type": "code",
        "outputId": "161a39ae-9148-4a72-df3c-c5c54599d13c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        }
      },
      "source": [
        "# Neural Network with PCA - evaluation\n",
        "\n",
        "# Evaluate accuracy of Neural Network on test set\n",
        "test_pred_MLP = MLP.predict(data_test_pca)\n",
        "acc_test_MLP = accuracy_score(label_test, test_pred_MLP)\n",
        "print(f'\\n The accuracy of the test set is {round(acc_test_MLP,2)}')\n",
        "\n",
        "# Confusion matrices and classification reports of test data\n",
        "print('Confusion matrix and classification report of test set')\n",
        "print(confusion_matrix(label_test, test_pred_MLP))\n",
        "print(classification_report(label_test, test_pred_MLP))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " The accuracy of the test set is 0.94\n",
            "Confusion matrix and classification report of test set\n",
            "[[21  0]\n",
            " [ 2 11]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      1.00      0.95        21\n",
            "           1       1.00      0.85      0.92        13\n",
            "\n",
            "    accuracy                           0.94        34\n",
            "   macro avg       0.96      0.92      0.94        34\n",
            "weighted avg       0.95      0.94      0.94        34\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aXTzxkGL-UbK",
        "colab_type": "text"
      },
      "source": [
        "## Learning Curves"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jnh5imnpsYjk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Function definition of learning curves\n",
        "def plot_learning_curve(estimator, title, X, y, axes, ylim=None, cv=None,\n",
        "                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n",
        "    axes.set_title(title)\n",
        "    if ylim is not None:\n",
        "        axes.set_ylim(*ylim)\n",
        "    axes.set_xlabel(\"Training examples\")\n",
        "    axes.set_ylabel(\"Score\")\n",
        "\n",
        "    train_sizes, train_scores, test_scores  = \\\n",
        "        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,\n",
        "                       train_sizes=train_sizes)\n",
        "    train_scores_mean = np.mean(train_scores, axis=1)\n",
        "    train_scores_std = np.std(train_scores, axis=1)\n",
        "    test_scores_mean = np.mean(test_scores, axis=1)\n",
        "    test_scores_std = np.std(test_scores, axis=1)\n",
        "\n",
        "    # Plot learning curve\n",
        "    axes.grid()\n",
        "    axes.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
        "                         train_scores_mean + train_scores_std, alpha=0.1,\n",
        "                         color=\"r\")\n",
        "    axes.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
        "                         test_scores_mean + test_scores_std, alpha=0.1,\n",
        "                         color=\"g\")\n",
        "    axes.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
        "                 label=\"Training score\")\n",
        "    axes.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
        "                 label=\"Cross-validation score\")\n",
        "    axes.legend(loc=\"best\")\n",
        "\n",
        "    return plt\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4djNT-CZAADv",
        "colab_type": "code",
        "outputId": "39a8d981-c10a-4dad-9dd0-79a446450ece",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "# Learning curves of training data set\n",
        "# Plot figuren\n",
        "# fig = plt.figure(figsize=(24,24))\n",
        "  \n",
        "# # Create a cross-validation object\n",
        "# cv = StratifiedShuffleSplit(n_splits=3, test_size=0.15) # test_size=0.15, random_state=0\n",
        "\n",
        "# # Now use the classifiers on all datasets\n",
        "# num = 0\n",
        "\n",
        "# # K-NN with PCA\n",
        "# ax1 = fig.add_subplot(2,2,1)\n",
        "# title1 = f\"kNN Classifier with PCA, #neighbors = {KNN.n_neighbors}\"\n",
        "# plot_learning_curve(KNN, title1, data_train_pca, label_train, ax1, ylim=(0.3, 1.01), cv=cv)\n",
        "\n",
        "# # Random Forest with 'Feature Importances'\n",
        "# ax2 = fig.add_subplot(2,2,2)\n",
        "# title2 = f\"RF Classifier with Feature Importances, #trees = {FI.n_estimators}\"\n",
        "# plot_learning_curve(FI, title2, data_train_selection, label_train, ax2, ylim=(0.3, 1.01), cv=cv)\n",
        "\n",
        "# # SVM with RFECV\n",
        "# ax3 = fig.add_subplot(2,2,3)\n",
        "# title3 = f\"SVM Classifier with RFECV, slack = {SVMLIN.C}\"\n",
        "# plot_learning_curve(SVMLIN, title3, data_train_RFECV, label_train, ax3, ylim=(0.3, 1.01), cv=cv)\n",
        "\n",
        "# # Neural Network with PCA\n",
        "# ax4 = fig.add_subplot(2,2,4)\n",
        "# title4 = f\"MLP Classifier with PCA, hidden layer sizes = {MLP.hidden_layer_sizes}\"\n",
        "# plot_learning_curve(MLP, title4, data_train_pca, label_train, ax4, ylim=(0.3, 1.01), cv=cv)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<module 'matplotlib.pyplot' from '/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py'>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 219
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1728x1728 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qDoevDkwHgIj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Apply preprocessing to the whole dataset\n",
        "  # Scaling \n",
        "data_scaled = transformer.transform(data_no_strings.values)\n",
        "data_df = pd.DataFrame(data_scaled, index = data_no_strings.index, columns = data_no_strings.columns)\n",
        "  # PCA\n",
        "data_pca = pca_train.transform(data_df)\n",
        "# RFECV\n",
        "data_RFECV = data_df[RFECV_columns]\n",
        "# FI\n",
        "data_selection = data_df[mask2]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IaijybZ6Bd3g",
        "colab_type": "code",
        "outputId": "12631799-25cf-43f8-a687-b3665aadc077",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "# Learning curves on the whole data set\n",
        "# Plot figuren\n",
        "fig = plt.figure(figsize=(24,24))\n",
        "  \n",
        "# Create a cross-validation object\n",
        "cv = StratifiedShuffleSplit(n_splits=3, test_size=0.15)\n",
        "\n",
        "# Now use the classifiers on all datasets\n",
        "num = 0\n",
        "\n",
        "# K-NN with PCA\n",
        "ax1 = fig.add_subplot(2,2,1)\n",
        "title1 = f\"kNN Classifier with PCA, #neighbors = {KNN.n_neighbors}\"\n",
        "plot_learning_curve(KNN, title1, data_pca, labels, ax1, ylim=(0.3, 1.01), cv=cv)\n",
        "\n",
        "# Random Forest with 'Feature Importances'\n",
        "ax2 = fig.add_subplot(2,2,2)\n",
        "title2 = f\"RF Classifier with Feature Importances, #trees = {FI.n_estimators}\"\n",
        "plot_learning_curve(FI, title2, data_selection, labels, ax2, ylim=(0.3, 1.01), cv=cv)\n",
        "\n",
        "# SVM with RFECV\n",
        "ax3 = fig.add_subplot(2,2,3)\n",
        "title3 = f\"SVM Classifier with RFECV, slack = {SVMLIN.C}\"\n",
        "plot_learning_curve(SVMLIN, title3, data_RFECV, labels, ax3, ylim=(0.3, 1.01), cv=cv)\n",
        "\n",
        "# Neural Network with PCA\n",
        "ax4 = fig.add_subplot(2,2,4)\n",
        "title4 = f\"MLP Classifier with PCA, hidden layer sizes = {MLP.hidden_layer_sizes}\"\n",
        "plot_learning_curve(MLP, title4, data_pca, labels, ax4, ylim=(0.3, 1.01), cv=cv)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<module 'matplotlib.pyplot' from '/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py'>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 221
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1728x1728 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}